{
  "lwc-accordion": {
    "prefix": "lwc-accordion",
    "description": "Creates an event without custom details",
    "body": [
      "<lightning-accordion class=\"$1\"",
      "    onsectiontoggle={${2:clickHandler}}",
      "    active-section-name=\"${3:A}\">",
      "    <lightning-accordion-section name=\"${3:A}\" label=\"${4:Accordion Title} ${3}\">",
      "",
      "    </lightning-accordion-section>",
      "    <lightning-accordion-section name=\"${5:B}\" label=\"${6:Accordion Title} ${5}\">",
      "",
      "    </lightning-accordion-section>",
      "",
      "    <lightning-accordion-section name=\"${7:C}\" label=\"${8:Accordion Title} ${7}\">",
      "",
      "    </lightning-accordion-section>",
      "</lightning-accordion>"
    ],
    "scope": "html"
  },
  "lwc-accordion-section": {
    "prefix": "lwc-accordion-section",
    "description": "Creates a lightning-accordion-section tag",
    "body": [
      "<lightning-accordion-section name=\"${1:X}\" label=\"${2:Accordion Title} ${1}\">",
      "",
      "</lightning-accordion-section>"
    ],
    "scope": "html"
  },
  "lwc-avatar": {
    "prefix": "lwc-avatar",
    "description": "Avatar - A visual representation of an object.",
    "body": ["<lightning-avatar src=\"${1:url}\"></lightning-avatar>"],
    "scope": "html"
  },
  "lwc-badge": {
		"prefix": "lwc-badge",
		"description":"Badge: Represents a label which holds a small amount of information, such as the number of unread notifications.",
		"body":["<lightning-badge label=\"${1:Alpha}\"",
		   "  class=\"${2|slds-badge_inverse,slds-badge_lightest,slds-theme_success,slds-theme_warning,slds-theme_error|}\"", 
		   "  icon-alternative-text=\"${3:The alternative text which is displayed as tooltip text.}\"",
		   "  icon-name=\"${4:utility:activity}\"",
		   "  icon-position=\"${5|start,end|}\" >",
		"</lightning-badge>"],
    "scope":"html"
	},
  "lwc-barcode-scanner": {
    "body": [
      "<lightning-barcode-scanner ",
      "  ${2|disabled,enabled|",
      "  enable-continuous-scan=${|false,true|",
      "  enabled-icon-src=\"\"",
      "  enabled-alternative-text=\"\"",
      "  disabled-icon-src=\"\"",
      "  disabled-alternative-text=\"\"",
      "  icon-size=\"\"",
      "  scanner-options={$}",
      "</lightning-barcode-scanner>"
    ],
    "description": "The lightning-barcode-scanner component embeds a barcode scanning function displayed as an icon, which launches the barcode scanner when the user clicks it.",
    "prefix": "lwc-barcode-scanner",
    "scope": "html"
  },
  "lwc-breadcrumb-link": {
    "body": [
      "<lightning-breadcrumb",
      "  label=\"${1:Parent Account}\"",
      "  href=\"${2:path/to/place/1}\"",
      ">",
      "</lightning-breadcrumb>"
    ],
    "description": "Breadcrumb (element) w/ link navigation - Displays the individual page path relative to a parent page",
    "prefix": "lwc-breadcrumb-onClick",
    "scope": "html"
  },
  "lwc-breadcrumb-onClick": {
    "body": [
      "<lightning-breadcrumb",
      "  label=\"${1:Parent Account}\"",
      "  href=\"${2:path/to/place/1}\"",
      "  onclick={${3:handleNavigateToCustomPage1}}",
      ">",
      "</lightning-breadcrumb>"
    ],
    "description": "Breadcrumb (element) w/ onClick handler - Displays the individual page path relative to a parent page",
    "prefix": "lwc-breadcrumb-onClick",
    "scope": "html"
  },
  "lwc-breadcrumbs-forEachLoop": {
    "body": [
      "<lightning-breadcrumbs>",
      "  <template for:each={${1:myBreadcrumbs}} for:item=\"${2:crumb\">",
      "      <lightning-breadcrumb",
      "          key={${2:crumbs}.id}",
      "          label={${2:crumbs}.label}",
      "          name={${2:crumbs}.name}",
      "          onclick={${3:onClickHandler}}>",
      "      </lightning-breadcrumb>",
      "  </template>",
      "</lightning-breadcrumbs>"
    ],
    "description": "Breadcrumbs w/ for each loop - Displays the path of a page relative to a parent page.",
    "prefix": "lwc-breadcrumbs-forEachLoop",
    "scope": "html"
  },
  "lwc-breadcrumbs-link": {
    "body": [
      "<lightning-breadcrumbs>",
      "  <lightning-breadcrumb",
      "    label=\"${1:Parent Account}\"",
      "    href=\"${2:path/to/place/1}\"",
      "  >",
      "  </lightning-breadcrumb>",
      "  <lightning-breadcrumb",
      "    label=\"${3:Case}\"",
      "    href=\"${4:path/to/place/2}\"",
      "  >",
      "  </lightning-breadcrumb>",
      "</lightning-breadcrumbs>"
    ],
    "description": "Breadcrumbs w/ link navigation - Displays the path of a page relative to a parent page.",
    "prefix": "lwc-breadcrumbs",
    "scope": "html"
  },
  "lwc-breadcrumbs-onClick": {
    "body": [
      "<lightning-breadcrumbs>",
      "  <lightning-breadcrumb",
      "    label=\"${1:Parent Account}\"",
      "    href=\"${2:path/to/place/1}\"",
      "    onclick={${3:handleNavigateToCustomPage1}}",
      "  >",
      "  </lightning-breadcrumb>",
      "  <lightning-breadcrumb",
      "    label=\"${4:Case}\"",
      "    href=\"${5:path/to/place/2}\"",
      "    onclick={${6:handleNavigateToCustomPage2}}",
      "  >",
      "  </lightning-breadcrumb>",
      "</lightning-breadcrumbs>"
    ],
    "description": "Breadcrumbs w/ onClick handler - Displays the path of a page relative to a parent page.",
    "prefix": "lwc-breadcrumbs",
    "scope": "html"
  },
  "lwc-button": {
    "body": ["<lightning-button-basic ",
    "  variant=\"${1|base,neutral,brand,brand-outline,destructive,destructive-text,inverse,success|}\"",
    "  label=\"${2:Button Label}\" ",
    "  onclick={${3:handleClick}} ",
    "  >",
    "</lightning-button>"
    ],
    "description": "Button - A clickable element used to perform an action.",
    "prefix": "lwc-button-basic",
    "scope": "html"
  },
  "lwc-button-extended": {
    "body": ["<lightning-button ",
    "  variant=\"${1|base,neutral,brand,brand-outline,destructive,destructive-text,inverse,success|}\"",
    "  label=\"${2:Button Label}\" ",
    "  title=\"${3:Looks like a link}\" ",
    "  value=\"${4}\" ",
    "  type=\"${5|button,reset,submit|}\"",
    "  onclick={${6:handleClick}} ",
    "  stretch=\"${7|false,true|}\" ",
    "  icon-name=\"${8:utility:activity}\"",
    "  icon-position=\"${9|left,right|}\"",
    "  class=\"${10}\"",
    "  >",
    "</lightning-button>"
    ],
    "description": "Button - A clickable element used to perform an action.",
    "prefix": "lwc-button-extended",
    "scope": "html"
  },
  "lwc-button-group": {
    "body": ["<lightning-button-group>",
    "  <lightning-button label=\"${1:Refresh}\"></lightning-button>",
    "  <lightning-button label=\"${2:Edit}\"></lightning-button>",
    "  <lightning-button label=\"${3:Save}\"></lightning-button>",
    "</lightning-button-group>"],
    "description": "A brief explanation of this snippet",
    "prefix": "Title or list of titles to prompt user",
    "scope": "html"
  },
  "lwc-button-group-dropdown-menu": {
    "body": ["<lightning-button-group>",
    "  <lightning-button label=\"${1:Refresh}\"></lightning-button>",
    "  <lightning-button label=\"${2:Edit}\"></lightning-button>",
    "  <lightning-button label=\"${3:Save}\"></lightning-button>",
    "  <lightning-button-menu alternative-text=\"Show menu\" variant=\"border-filled\">",
    "    <lightning-menu-item label=\"${4:Menu Item One}\" value=\"${5:menuOne}\"></lightning-menu-item>",
    "    <lightning-menu-item label=\"${6:Menu Item Two}\" value=\"${7:menuTwo}\"></lightning-menu-item>",
    "    <lightning-menu-item label=\"${8:Menu Item Three}\" value=\"${9:menuThree}\"></lightning-menu-item>",
    "  </lightning-button-menu>",
    "</lightning-button-group>"],
    "description": "A brief explanation of this snippet",
    "prefix": "Title or list of titles to prompt user",
    "scope": "html"
  },
  "lwc-button-icon": {
    "body": ["<lightning-button-icon ",
    "  icon-class=\"${1}\"",
    "  icon-name=\"${2:utility:adduser}\"",
    "  alternative-text=\"${3:Add user}\"", 
    "  class=\"${4}\"",
    "  name=\"${5}\"",
    "  size=\"${6|xx-small,x-small,small,medium, large}\"",
    "  title=\"${7}\"",
    "  tooltip=\"${8}\"",
    "  type=\"${9|button,reset,submit|}\"",
    "  value=\"${10}\"",
    "  variant=\"${11|bare,bare-inverse,border,border-filled,border-inverse,brand,container|}\"",
    ">",
    "</lightning-button-icon>"
    ],
    "description": "A brief explanation of this snippet",
    "prefix": "Title or list of titles to prompt user",
    "scope": "html"
  },
  "lwc-button-icon-stateful": {
    "body": ["<lightning-button-icon-stateful ",
    "  alternative-text=\"${1:Like user}\"", 
    "  icon-class=\"${2}\"",
    "  icon-name=\"${3:utility:like}\"",
    "  onclick=\"${4:clickHandler}\"",
    "  selected=\"${5:likeState}\"",
    "  size=\"${6|xx-small,x-small,small,medium}\"",
    "  value=\"${7}\"",
    "  variant=\"${8|border,border-filled,border-inverse|}\"",
    ">",
    "</lightning-button-icon-stateful>"
    ],
    "description": "Button Icon Stateful - represents an icon-only button element that toggles between two states.",
    "prefix": "lwc-button-icon-stateful",
    "scope": "html"
  },
  "lwc-button-menu": {
    "body": [
      "<lightning-button-menu ",
      "  alternative-text=\"${1:Show menu}\"",
      "  icon-name=\"${2:utility:down}\"",
      "  icon-size=\"${3|xx-small,x-small,small,medium, large}\"",
      "  label=\"${4}\"",
      "  onclick=\"${5:clickHandler}\"",
      "  variant=\"${6|bare,bare-inverse,border,border-filled,border-inverse,brand,container|}\"",
      ">",
      "  <lightning-menu-item value=\"${7:menuItemOne}\" label=\"${8:Menu Item One}\"></lightning-menu-item>",
      "  <lightning-menu-item value=\"${9:menuItemTwo}\" label=\"${10:Menu Item Two}\"></lightning-menu-item>",
      "  <lightning-menu-item value=\"${11:menuItemThree}\" label=\"${12:Menu Item Three}\"></lightning-menu-item>",
      "</lightning-button-menu>"
    ],
    "description": "Button Menu - represents a dropdown menu with a list of actions or functions.",
    "prefix": "Title or list of titles to prompt user",
    "scope": "html"
  },
  "lwc-button-stateful": {
    "body": [
      "<lightning-button-stateful",
      "  label-when-off=\"${1:Follow}\"",
      "  label-when-on=\"${2:Following}\"",
      "  label-when-hover=\"${3:Unfollow}\"",
      "  icon-name-when-off=\"${5:utility:add}\"",
      "  icon-name-when-on=\"${6:utility:check}\"",
      "  icon-name-when-hover=\"${7:utility:close}\"",
      "  selected={${8:isSelected}}",
      "  onclick={${9:handleClick}}>",
      "  variant={${10|brand,destructive,inverse,neutral,success,text|}}>",
      "</lightning-button-stateful>"
    ],
    "description": "Button Stateful - A button that toggles between states.",
    "prefix": "lwc-button-stateful",
    "scope": "html"
  },
  "lwc-card": {
    "body": [
      "<lightning-card icon-name=\"${1:standard:account}\" variant=\"${2|base,narrow|}\">",
      "  <div slot=\"title\">",
      "      ${3:Card Title}",
      "  </div>",
      "  <div slot=\"actions\">",
      "",
      "  </div>",
      "  <div slot=\"footer\">",
      "",
      "  </div>",
      "  <div>${4:Card Body (custom component)}</div>",
      "</lightning-card>"
    ],
    "description": "Card - Cards apply a container around a related grouping of information.",
    "prefix": "lwc-card",
    "scope": "html"
  },
  "lwc-carousel": {
    "body": [
      "<lightning-carousel ${1| ,disable-auto-scroll|} ${2| ,disable-auto-refresh|} scroll-duration=\"${3:5}\">",
      "  <lightning-carousel-image",
      "      src = \"${4}\"",
      "      header = \"${5:First Card}\"",
      "      description = \"${6:First card description.}\"",
      "      alternative-text = \"${7:First card accessible description.}\"",
      "      href = \"${8:javascript:void(0);}\">",
      "  </lightning-carousel-image>",
      "  <lightning-carousel-image",
      "      src = \"${9}\"",
      "      header = \"${10:Second Card}\"",
      "      description = \"${11:Second card description.}\"",
      "      alternative-text = \"${12:Second card accessible description.}\"",
      "      href = \"${13:javascript:void(0);}\">",
      "  </lightning-carousel-image>",
      "  <lightning-carousel-image",
      "      src = \"${14}\"",
      "      header = \"${15:Third Card}\"",
      "      description = \"${16:Third card description.}\"",
      "      alternative-text = \"${17:Third card accessible description.}\"",
      "      href = \"${18:javascript:void(0);}\">",
      "  </lightning-carousel-image>",
      "</lightning-carousel>"
    ],
    "description": "Carousel - A collection of images that are displayed one at a time.",
    "prefix": "lwc-carousel",
    "scope": "html"
  },
  "lwc-carousel-image": {
    "body": [
      "<lightning-carousel-image",
      "    src = \"${1}\"",
      "    header = \"${2:Card}\"",
      "    description = \"${3:Card description.}\"",
      "    alternative-text = \"${4:Card accessible description.}\"",
      "    href = \"${5:javascript:void(0);}\">",
      "</lightning-carousel-image>"
    ],
    "description": "Carousel Image - Specifies an image used in lighting-carousel, including description and title.",
    "prefix": "lwc-carousel-image",
    "scope": "html"
  },
  "lwc-checkbox-group": {
    "body": [
      "<lightning-checkbox-group name=\"${1:Checkbox Group}\"",
      "  label=\"2{2:Checkbox Group}\"",
      "  options={${3:options}",
      "  value={${4:value}}",
      "  message-when-value-missing=${5:Optional message to be displayed when no checkbox is selected and the required attribute is set.}",
      "  onchange={${6:handleChange}}",
      "  variant=${7|standard,label-hidden,label-inline,label-stacked|}",
      "  ${8| ,disabled|}",
      "  ${9| ,required|}",
      ">",
      "</lightning-checkbox-group>"
    ],
    "description": "Checkbox Group - A checkbox group that enables a selection of single or multiple options.",
    "prefix": "lwc-checkbox-group",
    "scope": "html"
  },
  "lwc-click-to-dial": {
    "body": [
      "<lightning-click-to-dial ",
      "  value=\"${1:4445559999}\" ",
      "  record-id=\"${2:500xxxxxxxxxxxx}\" ",
      "  params=\"${3:accountSid=xxx,sourceId=xxx,apiVersion=123}\">",
      "</lightning-click-to-dial>"

    ],
    "description": "Click To Dial - Renders a formatted phone number as click-to-dial enabled or disabled for Open CTI and Voice.",
    "prefix": "lwc-click-to-dial",
    "scope": "html"
  },
  "lwc-combobox": {
    "body": [
      "<lightning-combobox",
      "  name=\"%{1:progress}\"",
      "  label=\"${2:Status}\"",
      "  value={${3:value}}",
      "  placeholder=\"${4:Select Progress}\"",
      "  options={${5:options}}",
      "  onchange={${6:handleChange}} ",
      "  ${7| ,disabled|}",
      "  ${8| ,required|}",
      ">",
      "</lightning-combobox>"
    ],
    "description": "Combobox - A widget that provides an input field that is readonly, accompanied by a dropdown list of selectable options.",
    "prefix": "lwc-combobox",
    "scope": "html"
  },
  "lwc-combobox-extended": {
    "body": [
      "<lightning-combobox",
      "  name=\"%{1:progress}\"",
      "  label=\"${2:Status}\"",
      "  value={${3:value}}",
      "  placeholder=\"${4:Select Progress}\"",
      "  options={${5:options}}",
      "  onchange={${6:handleChange}} ",
      "  ${7| ,disabled|}",
      "  ${8| ,required|}",
      "  field-level-help=${9:Help text detailing the purpose and function of the combobox.}",
      "  message-when-value-missing=${11:Optional message to be displayed when no checkbox is selected and the required attribute is set.}",
      "  ${12| ,read-only|}",
      "  variant=${13|standard,label-hidden,label-inline,label-stacked|}",
      ">",
      "</lightning-combobox>"
    ],
    "description": "Combobox Extended - All attributes. A widget that provides an input field that is readonly, accompanied by a dropdown list of selectable options.",
    "prefix": "lwc-combobox",
    "scope": "html"
  },
  "lwc-datatable": {
    "body": [
      "<lightning-datatable",
      "  key-field=\"${1:id}\"",
      "  data={${2:data}}",
      "  columns={${3:columns}}>",
      "</lightning-datatable>"
    ],
    "description": "Datatable - A table that displays rows and columns of data",
    "prefix": "lwc-datatable",
    "scope": "html"
  },
  "lwc-datatable-extended": {
    "body": [
      "<lightning-datatable",
      "key-field=\"${1:id}\"",
      "column-widths-mode=${2|auto,fixed|}",
      "columns={${3:columns}}",
      "data={${4:data}}",
      "default-sort-direction={${5:defaultSortDirection}}",
      "${6| ,enable-infinite-loading|}",
      "${7| ,hide-checkbox-column|}",
      "${8| ,hide-table-header|}",
      "load-more-offset=${9:20}",
      "max-column-width=${10:1000}",
      "max-row-selection=${11}",
      "min-column-width=${12:50}",
      "onsort={${13:onHandleSort}}",
      "onrowaction={${14:handleRowAction}}",
      "${15| ,resize-column-disabled}",
      "resize-step=${16:10}",
      "row-number-offset=${17:0}",
      "${18| ,show-row-number-column|}",
      "sorted-by={${19:sortedBy}}",
      "sorted-direction={${20:sortDirection}}>",
      "</lightning-datatable>"
    ],
    "description": "Datatable - A table that displays rows and columns of data",
    "prefix": "lwc-datatable-extended",
    "scope": "html"
  },
  "lwc-dual-listbox": {
    "body": [
      "<lightning-dual-listbox name=\"${1:languages}\"",
      "  label=\"${2:Select Languages}\"",
      "  source-label=\"${3:Available}\"",
      "  selected-label=\"${4:Selected}\"",
      "  field-level-help=\"${5:Select your preferred languages}\"",
      "  options={${6:options}}",
      "  onchange={${7:handleChange}}>",
      "</lightning-dual-listbox>"
    ],
    "description": "Dual Listbox - A pair of listboxes that enables multiple options to be selected and reordered.",
    "prefix": "lwc-dual-listbox",
    "scope": "html"
  },
  "lwc-dual-listbox-default-values": {
    "body": [
      "<lightning-dual-listbox name=\"${1:languages}\"",
      "  label=\"${2:Select Languages}\"",
      "  source-label=\"${3:Available}\"",
      "  selected-label=\"${4:Selected}\"",
      "  field-level-help=\"${5:Select your preferred languages}\"",
      "  options={${6:options}}",
      "  onchange={${7:handleChange}}",
      "  value={${8:values}}>",
      "</lightning-dual-listbox>"
    ],
    "description": "Dual Listbox with default values - Dual Listbox utilizing minimum and maximum number of selections attributes. A pair of listboxes that enables multiple options to be selected and reordered.",
    "prefix": "lwc-dual-listbox-default-values",
    "scope": "html"
  },
  "lwc-dual-listbox-min-max": {
    "body": [
      "<lightning-dual-listbox name=\"${1:languages}\"",
      "  label=\"${2:Select Languages}\"",
      "  source-label=\"${3:Available}\"",
      "  selected-label=\"${4:Selected}\"",
      "  field-level-help=\"${5:Select your preferred languages}\"",
      "  min={${6:min}}",
      "  max={${7:max}}",
      "  options={${8:options}}",
      "  onchange={${9:handleChange}}>",
      "</lightning-dual-listbox>"
    ],
    "description": "Dual Listbox Min Max - Dual Listbox utilizing minimum and maximum number of selections attributes. A pair of listboxes that enables multiple options to be selected and reordered.",
    "prefix": "lwc-dual-listbox",
    "scope": "html"
  },
  "lwc-dual-listbox-required-options": {
    "body": [
      "<lightning-dual-listbox name=\"${1:languages}\"",
      "  label=\"${2:Select Languages}\"",
      "  source-label=\"${3:Available}\"",
      "  selected-label=\"${4:Selected}\"",
      "  field-level-help=\"${5:Select your preferred languages}\"",
      "  options={${6:options}}",
      "  onchange={${7:handleChange}}",
      "required-options={${8:requiredOptions}}",
      "  value={${9:values}}>",
      "</lightning-dual-listbox>"
    ],
    "description": "Dual Listbox with Required Options - Dual Listbox utilizing minimum and maximum number of selections attributes. A pair of listboxes that enables multiple options to be selected and reordered.",
    "prefix": "lwc-dual-listbox-required-options",
    "scope": "html"
  },
  "lwc-dynamic-icon": {
    "body": [
      "<lightning-dynamic-icon ",
      "  type=\"${1|ellie,eq,score,strength,trend,waffle|}\" ",
      "  alternative-text=\"${2:Text that describes what is happening not what the icon looks like.}\">",
      "</lightning-dynamic-icon>"
    ],
    "description": "Dynamic Icon - Represents various animated icons with different states.",
    "prefix": "lwc-dynamic-icon",
    "scope": "html"
  },
  "lwc-dynamic-icon-ellie": {
    "body": [
      "<lightning-dynamic-icon ",
      "  type=\"ellie\" ",
      "  alternative-text=\"${1:Text that describes what is happening not what the icon looks like.}\">",
      "</lightning-dynamic-icon>"
    ],
    "description": "Dynamic Icon Ellie - Show a pulsing blue circle, which pulses and stops after one animation cycle. This icon is great for field calculations or a process that's running in the background.",
    "prefix": "lwc-dynamic-icon-ellie",
    "scope": "html"
  },
  "lwc-dynamic-icon-eq": {
    "body": [
      "<lightning-dynamic-icon ",
      "  type=\"eq\" ",
      "  alternative-text=\"${1:Text that describes what is happening not what the icon looks like.}\"",
      "  option=${2|play,stop|}>",
      "</lightning-dynamic-icon>"
    ],
    "description": "Dynamic Icon EQ - Show an animated graph with three bars that rise and fall randomly. This icon is great for a graph that's refreshing.",
    "prefix": "lwc-dynamic-icon-eq",
    "scope": "html"
  },
  "lwc-dynamic-icon-score": {
    "body": [
      "<lightning-dynamic-icon ",
      "  type=\"score\" ",
      "  alternative-text=\"${1:Text that describes what is happening not what the icon looks like.}\"",
      "  option=${2|positive,negative|>",
      "</lightning-dynamic-icon>"
    ],
    "description": "Dynamic Icon Score - Show a green filled circle or a red unfilled circle. This icon is great for showing positive and negative indicators.",
    "prefix": "lwc-dynamic-icon-score",
    "scope": "html"
  },
  "lwc-dynamic-icon-strength": {
    "body": [
      "<lightning-dynamic-icon ",
      "  type=\"strength\" ",
      "  alternative-text=\"${1:Text that describes what is happening not what the icon looks like.}\"",
      "  option=${2:0}>",
      "</lightning-dynamic-icon>"
    ],
    "description": "Dynamic Icon Strength - Show three animated horizontal circles that are colored green or red. This icon is great for Einstein calculations or indicating password strengths.",
    "prefix": "lwc-dynamic-icon-strength",
    "scope": "html"
  },
  "lwc-dynamic-icon-trend": {
    "body": [
      "<lightning-dynamic-icon ",
      "  type=\"trend\" ",
      "  alternative-text=\"${1:Text that describes what is happening not what the icon looks like.}\"",
      "  option=${2|neutral,up,down|}>",
      "</lightning-dynamic-icon>"
    ],
    "description": "Dynamic Icon Trend - Show animated arrows that point up, down, or straight. This icon is great for showing movement of a value from one range to another, like a forecast score.",
    "prefix": "lwc-dynamic-icon-trend",
    "scope": "html"
  },
  "lwc-dynamic-icon-waffle": {
    "body": [
      "<lightning-dynamic-icon ",
      "  type=\"waffle\" ",
      "  alternative-text=\"${1:Text that describes what is happening not what the icon looks like.}\">",
      "</lightning-dynamic-icon>"
    ],
    "description": "Dynamic Icon Waffle - Show a square made up of a 3x3 grid of circles. This icon animates on hover. This icon is great for app-related items, like the App Launcher in Lightning Experience.",
    "prefix": "lwc-dynamic-icon-waffle",
    "scope": "html"
  },
  "lwc-event": {
    "prefix": "lwc-event",
    "description": "Creates an event without custom details",
    "body": [
      "this.dispatchEvent(new CustomEvent('${2:event-name}'));"
    ]
  },
  "lwc-event-data": {
    "prefix": "lwc-event-details",
    "description": "Creates a standard event for custom details",
    "body": [
      "const ${1:event} = new CustomEvent('${2:event-name}', {",
      "    detail: { $0 }",
      "});",
      "this.dispatchEvent(${1:event});"
    ]
  },
  "lwc-event-listener": {
    "prefix": "lwc-event-listener",
    "description": "Creates an event listener",
    "body": [
      "this.template.addEventListener('${1:event-name}', this.${2:local-method-name}.bind(this));"
    ]
  },
  "lwc-file-upload": {
    "body": [
      "<lightning-file-upload",
      "  label=\"${1:Attach receipt}\"",
      "  name=\"${2:fileUploader}\"",
      "  accept={${3:acceptedFormats}}",
      "  record-id={${4:myRecordId}}",
      "  onuploadfinished={${5:handleUploadFinished}}",
      "  ${6| ,multiple|}>",
      "</lightning-file-upload>"
    ],
    "description": "File Upload - provides an easy and integrated way for users to upload multiple files.",
    "prefix": "lwc-file-upload",
    "scope": "html"
  },
  "lwc-flow": {
    "body": [
      "<lightning-flow", 
      "  flow-api-name=\"${1:Survey_customers}\"", 
      "  flow-finish-behavior=\"${2|RESTART,NONE}\"",
      "  flow-input-variables={${3:inputVariables}}", 
      "  flow-interview-id=${4}",
      "  onstatuschange={${5:handleStatusChange}}", 
      ">", 
      "</lightning-flow>"
    ],
    "description": "Flow - Represents a flow interview",
    "prefix": "lwc-flow",
    "scope": "html"
  },
  "lwc-formatted-address": {
    "body": [
      "<lightning-formatted-address",
      "  street=\"${1:121 Spear St.}\"",
      "  city=\"${2:San Francisco}\"",
      "  country=\"${3:US}\"",
      "  province=\"${4:CA}\"",
      "  postal-code=\"${5:94105}\"",
      "></lightning-formatted-address>"
    ],
    "description": "Formatted Address - Displays a formatted address with a link to the given location on Google Maps. The link is opened in a new tab. A static map can be displayed with the address for better context.",
    "prefix": "lwc-formatted-address",
    "scope": "html"
  },
  "lwc-formatted-address-extended": {
    "body": [
      "<lightning-formatted-address",
      "  street=\"${1:121 Spear St.}\"",
      "  city=\"${2:San Francisco}\"",
      "  country=\"${3:US}\"",
      "  ${4| ,disabled|}",
      "  locale=\"${5}\"",
      "  province=\"${6:CA}\"",
      "  postal-code=\"${7:94105}\"",
      "  show-static-map=${8|false,true|}",
      "></lightning-formatted-address>"
    ],
    "description": "Formatted Address Extended - All attributes. Displays a formatted address with a link to the given location on Google Maps. The link is opened in a new tab. A static map can be displayed with the address for better context.",
    "prefix": "lwc-formatted-address-extended",
    "scope": "html"
  },
  "lwc-formatted-address-lat-long": {
    "body": [
      "<lightning-formatted-address",
      "  street=\"${1:121 Spear St.}\"",
      "  city=\"${2:San Francisco}\"",
      "  country=\"${3:US}\"",
      "  latitude=\"${4:37.792179}\"",
      "  longitude=\"${5:-122.392735}\"",
      "  province=\"${6:CA}\"",
      "  postal-code=\"${7:94105}\"",
      "></lightning-formatted-address>"
    ],
    "description": "Formatted Address w/ Lat/Long - Using latitude and longitude coordinates for faster map rendering. Displays a formatted address with a link to the given location on Google Maps. The link is opened in a new tab. A static map can be displayed with the address for better context.",
    "prefix": "lwc-formatted-address-lat-long",
    "scope": "html"
  },
  "lwc-formatted-address-locale": {
    "body": [
      "<lightning-formatted-address",
      "  street=\"${1:Avenida Concha Espina, Nº 1}\"",
      "  city=\"${2:Madrid}\"",
      "  postal-code=\"${3:28036}\"",
      "  country=\"${4:España}\"",
      "  locale=\"${5:es-ES}\"",
      "></lightning-formatted-address>"
    ],
    "description": "Formatted Address Locale - Displays an address in the format of a specific locale.",
    "prefix": "lwc-formatted-address-locale",
    "scope": "html"
  },
  "lwc-imperative-apex": {
    "prefix": "lwc-imperative-apex",
    "description": "Creates an imperative Apex call",
    "body": [
      "${1:method name}()",
      "    .then(result => {",
      "        ${0}",
      "    })",
      "    .catch(error => {",
      "        // TODO Error handling",
      "    });"
    ]
  },
  "lwc-nav-item-page": {
    "prefix": "lwc-nav-item-page",
    "description": "Navigation to a CustomTab",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: 'standard__navItemPage',",
      "    attributes: {",
      "        apiName: \"${1:The unique name of the CustomTab.}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-knowledge-article": {
    "prefix": "lwc-nav-knowledge-article",
    "description": "Navigation to a Knowledge Article",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: 'standard__knowledgeArticlePage',",
      "    attributes: {",
      "        articleType: \"${1:The articleType API name of the Knowledge Article record.}\",",
      "        urlName: \"${2:The value of the urlName field on the target KnowledgeArticleVersion record. The urlName is the article's URL.}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-lightning-component": {
    "prefix": "lwc-nav-lightning-component",
    "description": "Navigation to a custom Lightning component",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: 'standard__component',",
      "    attributes: {",
      "        componentName: \"c__${1:component name}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-object-page": {
    "prefix": "lwc-nav-object-page",
    "description": "Navigation to an object page",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: 'standard__objectPage',",
      "    attributes: {",
      "        actionName: \"${1:home, list, or new}\",",
      "        objectApiName: \"${2:The API name of the standard or custom object. }\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-page": {
    "prefix": "lwc-nav-page",
    "description": "Navigation to a named page",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: 'standard__namedPage',",
      "    attributes: {",
      "        pageName: \"${1:home, chatter, today, dataAssessment, or filePreview}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-record-page": {
    "prefix": "lwc-nav-record-page",
    "description": "Navigation to a record page",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: 'standard__recordPage',",
      "    attributes: {",
      "        actionName: \"${1:clone, edit, or view}\",",
      "        recordId: \"${2:recordId}\",",
      "        objectApiName: \"${3:The API name of the record’s object. Optional for lookups.}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-record-relationship-page": {
    "prefix": "lwc-nav-record-relationship-page",
    "description": "Navigation to a record relationship page",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: 'standard__recordRelationshipPage',",
      "    attributes: {",
      "        actionName: \"view\",",
      "        recordId: \"${1:recordId}\",",
      "        objectApiName: \"${2:The API name of the record’s object. Optional for lookups.}\",",
      "        relationshipApiName: \"${3:The API name of the object’s relationship field (optional).}\"",
      "    }",
      "});"
    ]
  },
  "lwc-nav-web-page": {
    "prefix": "lwc-nav-web-page",
    "description": "Navigation to an external URL",
    "body": [
      "this[NavigationMixin.Navigate]({",
      "    type: 'standard__webPage',",
      "    attributes: {",
      "       url: \"${1:The URL of the page you are navigating to.}\"",
      "    }",
      "});"
    ]
  },
  "lwc-toast": {
    "prefix": "lwc-toast",
    "description": "Creates toast success function",
    "body": [
      "this.dispatchEvent(new ShowToastEvent({",
      "    title: '${1:title}',",
      "    message: '${2:message}',",
      "    variant: 'success'",
      "}));"
    ]
  },
  "lwc-toast-error": {
    "prefix": "lwc-toast-error",
    "description": "Creates toast error function",
    "body": [
      "this.dispatchEvent(new ShowToastEvent({",
      "    title: '${1:title}',",
      "    message: '${2:message}',",
      "    variant: 'error'",
      "}));"
    ]
  },
  "lwc-toast-warning": {
    "prefix": "lwc-toast-warning",
    "description": "Creates toast warning function",
    "body": [
      "this.dispatchEvent(new ShowToastEvent({",
      "    title: '${1:title}',",
      "    message: '${2:message}',",
      "    variant: 'warning'",
      "}));"
    ]
  },
  "lwc-wire-apex-function": {
    "prefix": "lwc-wire-apex-function",
    "description": "Creates a @wire'd function for Apex with data modification",
    "body": [
      "@wire(${1:apex-method-name}, {$0})",
      "${2:apex-function-name} ({error, data}) {",
      "    if (error) {",
      "        // TODO: Error handling",
      "    } else if (data) {",
      "        // TODO: Data handling",
      "    }",
      "}"
    ]
  },
  "lwc-wire-apex-property": {
    "prefix": "lwc-wire-apex-property",
    "description": "Creates a @wire'd property for Apex",
    "body": [
      "@wire(${1:apex-method-name}, {$0})",
      "${2:apex-property-name}"
    ]
  },
  "lwc-wire-get-record-function": {
    "prefix": "lwc-wire-get-record-function",
    "description": "Creates a @wire'd function for getRecord",
    "body": [
      "@api recordId;",
      "",
      "@wire(getRecord, { recordId: '\\$recordId', fields: [ $0 ] } )",
      "${2:record-function-name} ({error, data}) {",
      "    if (error) {",
      "        // TODO: Error handling",
      "    } else if (data) {",
      "        // TODO: Data handling",
      "    }",
      "}"
    ]
  },
  "lwc-wire-get-record-property": {
    "prefix": "lwc-wire-get-record-property",
    "description": "Creates a @wire'd property for getRecord",
    "body": [
      "@api recordId;",
      "",
      "@wire(getRecord, { recordId: '\\$recordId', fields: [ $0 ] } )",
      "${2:record-property-name}"
    ]
  },
  "lwc-wire-get-records-function": {
    "prefix": "lwc-wire-get-records-function",
    "description": "Creates a @wire'd function for getRecords",
    "body": [
      "@wire(getRecords, { records:[ { recordIds: [ $2 ], fields: [ $0 ] } ] } )",
      "${1:records-function-name} ({error, data}) {",
      "    if (error) {",
      "        // TODO: Error handling",
      "    } else if (data) {",
      "        // TODO: Data handling",
      "    }",
      "}"
    ]
  },
  "lwc-wire-get-records-property": {
    "prefix": "lwc-wire-get-records-property",
    "description": "Creates a @wire'd property for getRecords",
    "body": [
      "@api recordId;",
      "",
      "@wire(getRecords, { records:[ { recordIds: [ $2 ], fields: [ $0 ] } ] } )",
      "${1:records-property-name}"
    ]
  }
}
